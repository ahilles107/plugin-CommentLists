<script>
jQuery.fn.dataTableExt.oApi.fnSetFilteringDelay = function ( oSettings, iDelay ) {
    /*
     * Inputs:      object:oSettings - dataTables settings object - automatically given
     *              integer:iDelay - delay in milliseconds
     * Usage:       $('#example').dataTable().fnSetFilteringDelay(250);
     * Author:      Zygimantas Berziunas (www.zygimantas.com) and Allan Jardine
     * License:     GPL v2 or BSD 3 point style
     * Contact:     zygimantas.berziunas /AT\ hotmail.com
     */
     var
     _that = this,
     iDelay = (typeof iDelay == 'undefined') ? 250 : iDelay;
     
     this.each( function ( i ) {
        $.fn.dataTableExt.iApiIndex = i;
        var
        $this = this, 
        oTimerId = null, 
        sPreviousSearch = null,
        anControl = $( 'input', _that.fnSettings().aanFeatures.f );

        anControl.unbind( 'keyup' ).bind( 'keyup', function(event) {
            var $$this = $this;
            var searchKeyword;
            var inputKeyword;

            inputKeyword = anControl.val();
            searchKeyword = inputKeyword;

            if (sPreviousSearch === null || sPreviousSearch != anControl.val()) {
                window.clearTimeout(oTimerId);
                sPreviousSearch = anControl.val();  
                oTimerId = window.setTimeout(function() {
                    $.fn.dataTableExt.iApiIndex = i;
                    searchKeyword = inputKeyword; 
                    _that.fnFilter( searchKeyword );
                }, iDelay);
            }
        });

        return this;
    } );
     return this;
 }

 </script>

 <input id="search_table_id" type="hidden" value="table-{{ id }}" />
 <div class="table">

    <table id="table-{{ id }}" cellpadding="0" cellspacing="0" class="datatable">

    </table>
</div>
<script type="text/javascript"><!--
$(document).ready(function()
{   
    tables = [];
    filters = [];
    var table = $('#table-{{ id }}');
    if (typeof contextListFilters == 'undefined')
        filters['{{ id }}'] = [];
    else
        filters['{{ id }}'] = contextListFilters;

    tables['{{ id }}'] = table.dataTable({
        'bLengthChange': false,
        'bAutoWidth': true,
        'bScrollCollapse': true,
        'bssDestroy': true,
        'sDom': '{{ sDom }}',
        'oLanguage': {
            'oPaginate': {
                'sFirst': translations['plugin.lists.label.first'],
                'sNext': translations['plugin.lists.label.next'],
                'sPrevious': translations['plugin.lists.label.previous'],
                'sLast': translations['plugin.lists.label.last'],
            },

            'sZeroRecords': translations['plugin.lists.label.norecords'],
            'sSearch': '',
            'sInfo': translations['plugin.lists.table.info'],
            'sEmpty': translations['plugin.lists.table.noentries'],
            'sInfoFiltered': translations['plugin.lists.table.filtering'],
            'sLengthMenu': translations['plugin.lists.table.menu'],
            'sInfoEmpty': '',
        },
        'aoColumnDefs': [
            { // inputs for id
                'fnRender': function(obj) {
                    var id = obj.aData[0] + '_' + obj.aData[1];
                    return '<input type="checkbox" name="' + id + '" />';
                },
                'aTargets': [0]
            },

            { // hide columns
                'bVisible': false,
                'aTargets': [0,1]
            },
            { // not sortable
                'bSortable': false,
                'aTargets': [0, 1, 2]
            },
            { // id
                'sClass': 'id',
                'sWidth': '3em',
                'aTargets': [0]
            },
            { // name
                'sClass': 'name',
                'sWidth': '13em',
                'aTargets': [2]
            },
            ],
            'fnDrawCallback': function() {
                $('#table-{{ id }} tbody tr').click(function(event) {
                    if (event.target.type == 'checkbox') {
                    return; // checkbox click, handled by it's change
                }

                var input = $('input:checkbox', $(this));
                if (input.attr('checked')) {
                    input.removeAttr('checked');
                } else {
                    input.attr('checked', 'checked');
                }
                input.change();
            }).each(function() {
                var tr = $(this);
                // detect locks
                if ($('.name .ui-icon-locked', tr).not('.current-user').size()) {
                    tr.addClass('locked');
                }
            });

            $('#table-{{ id }} tbody input:checkbox').change(function() {
                if ($(this).attr('checked')) {
                    $(this).parents('tr').addClass('selected');
                } else {
                    $(this).parents('tr').removeClass('selected');
                }

                // update check all checkbox on item change
                var table = $('#table-{{ id }}');
                if ($('tbody input:checkbox', table).size() == $('tbody input:checkbox:checked', table).size()) { // all checked
                    $('.smartlist thead input:checkbox').attr("checked", true);
                } else {
                    $('.smartlist thead input:checkbox').attr("checked", false);
                }
            });
        },
        {% if items %}
        'bPaging': false,
        'iDisplayLength': 5,
        {% else %} // no items - server side ?>
        'bPaging': true,
        'bServerSide': true,
        'iDisplayLength' : 5,
        'sAjaxSource': '{{ doDataSource }}',
        'sPaginationType': 'full_numbers',
        'aaSorting' : [[0, 'desc']],
        'fnServerData': function (sSource, aoData, fnCallback)
        {
            var addedFilters = new Array();
            for (var i in filters['{{ id }}'])
            {
                addedFilters.push(i);
                aoData.push
                ({
                    'name': i,
                    'value': filters['{{ id }}'][i],
                });
            }
                callController('{{ doDataSource }}', aoData, fnCallback);
            },
            'fnStateLoadCallback': function(oSettings, oData) {
            oData.sFilter = ''; // reset filter
            {% if order %}
            oData.aaSorting = [[2, 'asc']]; // show correct order on reload
            {% endif %}
            return true;
        },
        {% endif %}
        {% if colVis %}
        'oColVisx': { // disable Show/hide column
        },
        {% endif %}
        {% if order %}
        'fnRowCallback': function(nRow, aData, iDisplayIndex, iDisplayIndexFull ) {
            var id = $(aData[0]).attr('name').split('_')[0];
            $(nRow).attr('id', 'article_' + id);
            return nRow;
        },
        {% endif %}
        'bJQueryUI': true
    }).css('position', 'relative').css('width', '100%').fnSetFilteringDelay(500);

});
--></script>
